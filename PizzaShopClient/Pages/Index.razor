@page "/"
@inject IPizzaService _pizzaService;
@inject NavigationManager UriHelper
@inject OrderState OrderState

<h1>Blazing Pizzas</h1>


<div class="main">
    <ul class="pizza-cards">
        @if (specials != null)
        {
            @foreach (var special in specials)
            {
                <li @onclick="@(() => OrderState.ShowConfigurePizzaDialog(special))" style="background-image: url('@special.ImageUrl')">
                    <div class="pizza-info">
                        <span class="title">@special.Name</span>
                        @special.Description
                        <span class="price">@special.GetFormattedBasePrice()</span>
                    </div>
                </li>
                
            }
        }
    </ul>
</div>


<div class="sidebar">
    @if (OrderState.Order.Pizzas.Any())
    {
        <div class="order-contents">
            <h2>Your order</h2>

            @foreach (var configuredPizza in OrderState.Order.Pizzas)
            {
                <ConfiguredPizzaItem Pizza="configuredPizza" OnRemoved="@(() => OrderState.RemoveConfiguredPizza(configuredPizza))" />
            }
        </div>
    }
    else
    {
        <div class="empty-cart">Choose a pizza<br>to get started</div>
    }

    <div class="order-total @(OrderState.Order.Pizzas.Any() ? "" : "hidden")">
        Total:
        <span class="total-price">@OrderState.Order.GetFormattedTotalPrice()</span>
        <button class="btn btn-warning" disabled="@(OrderState.Order.Pizzas.Count == 0)" @onclick="@PlaceOrder">
            Order >
        </button>
    </div>
</div>



@if (OrderState.ShowingConfigureDialog)
{
    <ConfigurePizzaDialog Pizza="OrderState.ConfiguringPizza"
                          OnCancel="OrderState.CancelConfigurePizzaDialog"
                          OnConfirm="OrderState.ConfirmConfigurePizzaDialog" />
}

@code{
    List<PizzaSpecial> specials = new();



    protected async override Task OnInitializedAsync()
    {
        await GetData();

    }

    private async Task GetData()
    {
        var response = await _pizzaService.GetListPizzaSpecials();
        specials = response.DataResult;
    }  
    async Task PlaceOrder()
    { 
        var newOrder = await _pizzaService.PlaceOrder(OrderState.Order);
        var newOrderId = newOrder.OrderId;
        OrderState.ResetOrder();      
        UriHelper.NavigateTo($"myorders/{newOrderId}");
    }
}